using Api.Builders;
using FluentAssertions;
using Xunit;

namespace Api.Tests.Unit.Builders;

public class JourneyCategoryBuilderTests
{
    [Fact]
    public void Build_ShouldCreateJourneyCategoryWithRequiredFields()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Business Travel";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name).Build();
        
        // Assert
        journeyCategory.Should().NotBeNull();
        journeyCategory.UserId.Should().Be(userId);
        journeyCategory.Name.Should().Be(name);
        journeyCategory.Description.Should().BeNull();
        journeyCategory.CreatedAt.Should().NotBe(default);
        journeyCategory.LastModifiedAt.Should().NotBe(default);
    }

    [Fact]
    public void Build_ShouldTrimNameWhitespace()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var nameWithWhitespace = "  Vacation  ";
        var expectedName = "Vacation";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, nameWithWhitespace).Build();
        
        // Assert
        journeyCategory.Name.Should().Be(expectedName);
    }

    [Fact]
    public void WithDescription_ShouldSetDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Adventure Travel";
        var description = "Trips focused on outdoor adventures and extreme sports";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(description)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().Be(description);
    }

    [Fact]
    public void WithDescription_ShouldTrimDescriptionWhitespace()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Cultural Travel";
        var descriptionWithWhitespace = "  Exploring different cultures and traditions  ";
        var expectedDescription = "Exploring different cultures and traditions";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(descriptionWithWhitespace)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().Be(expectedDescription);
    }

    [Fact]
    public void WithDescription_ShouldHandleNullDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "General Travel";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(null)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().BeNull();
    }

    [Fact]
    public void WithDescription_ShouldHandleEmptyDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Quick Trips";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription("")
            .Build();
        
        // Assert
        journeyCategory.Description.Should().BeEmpty();
    }

    [Fact]
    public void WithDescription_ShouldHandleWhitespaceOnlyDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Weekend Getaways";
        var whitespaceDescription = "   ";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(whitespaceDescription)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().BeEmpty();
    }

    [Fact]
    public void FluentApi_ShouldAllowMethodChaining()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Luxury Travel";
        var description = "High-end travel experiences with premium accommodations";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(description)
            .Build();
        
        // Assert
        journeyCategory.UserId.Should().Be(userId);
        journeyCategory.Name.Should().Be(name);
        journeyCategory.Description.Should().Be(description);
    }

    [Fact]
    public void Build_ShouldHaveEmptyIdByDefault()
    {
        // Arrange
        var userId = Guid.NewGuid();
        
        // Act
        var category1 = new JourneyCategoryBuilder(userId, "Category 1").Build();
        var category2 = new JourneyCategoryBuilder(userId, "Category 2").Build();
        
        // Assert
        // Note: Entity IDs are typically generated by the database, so they start as empty
        category1.Id.Should().Be(Guid.Empty);
        category2.Id.Should().Be(Guid.Empty);
    }

    [Fact]
    public void Build_ShouldHandleVeryLongDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Detailed Category";
        var longDescription = new string('A', 500); // Maximum length according to entity constraint
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(longDescription)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().Be(longDescription);
        journeyCategory.Description!.Length.Should().Be(500);
    }

    [Fact]
    public void Build_ShouldHandleSpecialCharactersInName()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var nameWithSpecialChars = "Travel & Tourism (2024)";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, nameWithSpecialChars).Build();
        
        // Assert
        journeyCategory.Name.Should().Be(nameWithSpecialChars);
    }

    [Fact]
    public void Build_ShouldHandleSpecialCharactersInDescription()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "International Travel";
        var descriptionWithSpecialChars = "Travel to foreign countries: Europe, Asia & Africa (exciting!)";
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name)
            .WithDescription(descriptionWithSpecialChars)
            .Build();
        
        // Assert
        journeyCategory.Description.Should().Be(descriptionWithSpecialChars);
    }

    [Fact]
    public void Build_ShouldSetTimestampsAutomatically()
    {
        // Arrange
        var userId = Guid.NewGuid();
        var name = "Timestamped Category";
        var beforeCreation = DateTime.UtcNow.AddSeconds(-1);
        
        // Act
        var journeyCategory = new JourneyCategoryBuilder(userId, name).Build();
        var afterCreation = DateTime.UtcNow.AddSeconds(1);
        
        // Assert
        var createdAtUtc = journeyCategory.CreatedAt.ToDateTimeUtc();
        var lastModifiedAtUtc = journeyCategory.LastModifiedAt.ToDateTimeUtc();
        
        createdAtUtc.Should().BeAfter(beforeCreation);
        createdAtUtc.Should().BeBefore(afterCreation);
        lastModifiedAtUtc.Should().BeAfter(beforeCreation);
        lastModifiedAtUtc.Should().BeBefore(afterCreation);
    }
}